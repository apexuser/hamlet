Lets say we have a package for mathmatical calculations and a procedure that calculates roots of quadratic equation.

Code:

create or replace package math_pkg is

no_roots      exception;
not_a_quadric exception;

procedure get_roots(a in number, b in number, c in number, x1 out number, x2 out number);

end math_pkg;
/

create or replace package body math_pkg is

procedure get_roots(a in number, b in number, c in number, x1 out number, x2 out number) is
  d number;
begin
  d := b * b - 4 * a * c;

  if d < 0 then
     raise no_roots;
  end if;
 
  x1 := (b + sqrt(d)) / (2 * a);
  x2 := (b - sqrt(d)) / (2 * a);
end;

end math_pkg;
/

First of all, we need to create a testsuite:

Code:

insert into hamlet.test_suite(test_suite_id, parent_id, test_suite_description) values (hamlet.hamlet_seq.nextval, null, 'Testing procedure for math_pkg.test_roots');

Then we need to decide how many cases we need to test procedure. There is trhee possibilities in quadratic equations: no roots, one root and two roots. Also we want to throw exception in a case when a = 0 (i. e. this is not a quadric equation). So we decided, that four test cases will be sufficient:

   a    b    c    expected x1   expected x2    exception
 ------------------------------------------------------------
   1   -3    2              1             2
   1   -4    4              2             2
   1    2    3              -             -    no_roots
   0    5    7              -             -    not_a_quadric

OK, let's create some records.

Code:

declare
  test_suite number;
  test_case  number;

begin
  -- create new test suite:
  test_suite := hamlet.hamlet.new_test_suite('Testing procedure for solving quadric equations');

  -- create new test case for given test suite: 
  test_case := hamlet.hamlet.new_test_case(test_suite, 'Two roots');
  
  -- create parameters for given test case:
  -- input parameters for procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'A',  1, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'B', -3, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'C',  2, test_case);
  -- expected result of procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X1', 1, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X2', 2, test_case);

  -- next test case:
  test_case := hamlet.hamlet.new_test_case(test_suite, 'One root');
  -- input parameters for procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'A',  1, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'B', -4, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'C',  4, test_case);
  -- expected result of procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X1', 2, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X2', 2, test_case);

  -- next test case:
  test_case := hamlet.hamlet.new_test_case(test_suite, 'One root');
  -- input parameters for procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'A', 1, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'B', 2, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'C', 3, test_case);
  -- expected result of procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X1', null, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X2', null, test_case);
  -- also we expect exception:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_ERR, hamlet.hamlet.PR_EXCEPTION, 'Equation has no roots', test_case);

  -- and last test case:
  test_case := hamlet.hamlet.new_test_case(test_suite, 'One root');
  -- input parameters for procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'A', 0, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'B', 5, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_IN, 'C', 7, test_case);
  -- expected result of procedure:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X1', null, test_case);
  hamlet.hamlet.set_param(hamlet.hamlet.PR_EXP, 'X2', null, test_case);
  -- also we expect exception:
  hamlet.hamlet.set_param(hamlet.hamlet.PR_ERR, hamlet.hamlet.PR_EXCEPTION, 'Equation is not quadric', test_case);


end;
/
