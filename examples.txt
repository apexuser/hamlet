Lets say we have a package for mathmatical calculations and a procedure that calculates roots of quadratic equation.

Code:

create or replace package math_pkg is

no_roots      exception;
not_a_quadric exception;

procedure get_roots(a in number, b in number, c in number, x1 out number, x2 out number);

end math_pkg;
/

create or replace package body math_pkg is

procedure get_roots(a in number, b in number, c in number, x1 out number, x2 out number) is
  d number;
begin
  d := b * b - 4 * a * c;

  if d < 0 then
     raise no_roots;
  end if;
 
  x1 := (b + sqrt(d)) / (2 * a);
  x2 := (b - sqrt(d)) / (2 * a);
end;

end math_pkg;
/

First of all, we need to create a testsuite:

Code:

insert into hamlet.test_suite(test_suite_id, parent_id, test_suite_description) values (hamlet.hamlet_seq.nextval, null, 'Testing procedure for math_pkg.test_roots');

Then we need to decide how many cases we need to test procedure. There is trhee possibilities in quadratic equations: no roots, one root and two roots. Also we want to throw exception in a case when a = 0 (i. e. this is not a quadric equation). So we decided, that four test cases will be sufficient:

   a    b    c    expected x1   expected x2    exception
 ------------------------------------------------------------
   1   -3    2              1             2
   1   -4    4             -2            -2
   1    2    3              -             -    no_roots
   0    5    7              -             -    not_a_quadric

OK, lets create some records.

Code:

insert into hamlet.test_case(test_case_id, test_suite_id, test_case_description)
  select hamlet.hamlet.nextval, ts.test_suite_id, '2 roots' 
  from hamlet.test_suite ts
  where ts.test_suite_description = 'Testing procedure for math_pkg.test_roots';

